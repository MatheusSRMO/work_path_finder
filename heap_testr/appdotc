#include <stdio.h>
#include <stdlib.h>

// Estrutura para representar um heap
typedef struct {
    void** data; // Array de ponteiros genéricos
    int size;    // Tamanho atual do heap
    int capacity; // Capacidade máxima do heap
} Heap;

// Função auxiliar para criar um novo heap
Heap* heap_construct(int capacity) {
    Heap* heap = (Heap*)malloc(sizeof(Heap));
    heap->data = (void**)malloc(capacity * sizeof(void*));
    heap->size = 0;
    heap->capacity = capacity;
    return heap;
}

// Função auxiliar para trocar dois elementos no heap
void swap(void** a, void** b) {
    void* temp = *a;
    *a = *b;
    *b = temp;
}

// Função para ajustar o heap para baixo (quando um elemento é removido)
void heapifyDown(Heap* heap, int index, int (*compare)(void*, void*)) {
    int leftChild = 2 * index + 1;
    int rightChild = 2 * index + 2;
    int largest = index;

    if (leftChild < heap->size && compare(heap->data[leftChild], heap->data[largest]) > 0) {
        largest = leftChild;
    }

    if (rightChild < heap->size && compare(heap->data[rightChild], heap->data[largest]) > 0) {
        largest = rightChild;
    }

    if (largest != index) {
        swap(&heap->data[index], &heap->data[largest]);
        heapifyDown(heap, largest, compare);
    }
}

// Função para ajustar o heap para cima (quando um elemento é inserido)
void heapifyUp(Heap* heap, int index, int (*compare)(void*, void*)) {
    int parent = (index - 1) / 2;

    if (parent >= 0 && compare(heap->data[index], heap->data[parent]) > 0) {
        swap(&heap->data[index], &heap->data[parent]);
        heapifyUp(heap, parent, compare);
    }
}

// Função para inserir um elemento no heap
void insert(Heap* heap, void* item, int (*compare)(void*, void*)) {
    if (heap->size == heap->capacity) {
        printf("O heap está cheio. Não é possível inserir mais elementos.\n");
        return;
    }

    heap->data[heap->size] = item;
    heapifyUp(heap, heap->size, compare);
    heap->size++;
}

// Função para remover o elemento de maior prioridade (raiz do heap)
void* removeMax(Heap* heap, int (*compare)(void*, void*)) {
    if (heap->size == 0) {
        printf("O heap está vazio. Não há elementos para remover.\n");
        return NULL;
    }

    void* maxItem = heap->data[0];
    heap->data[0] = heap->data[heap->size - 1];
    heap->size--;
    heapifyDown(heap, 0, compare);

    return maxItem;
}

// Função de comparação de inteiros (exemplo)
int compareInt(void* a, void* b) {
    int* intA = (int*)a;
    int* intB = (int*)b;

    if (*intA < *intB) {
        return -1;
    } else if (*intA > *intB) {
        return 1;
    } else {
        return 0;
    }
}

// Função para liberar a memória do heap
void freeHeap(Heap* heap) {
    free(heap->data);
    free(heap);
}

// Função para imprimir os elementos do heap (exemplo)
void printHeap(Heap* heap) {
    printf("Elementos do heap: ");
    for (int i = 0; i < heap->size; i++) {
        int* item = (int*)heap->data[i];
        printf("%d ", *item);
    }
    printf("\n");
}

// Função principal para testar a implementação do heap
int main() {
    // Criando um heap com capacidade para 10 elementos
    Heap* heap = heap_construct(10);

    // Inserindo alguns elementos no heap
    int a = 5;
    int b = 10;
    int c = 3;

    insert(heap, &a, compareInt);
    insert(heap, &b, compareInt);
    insert(heap, &c, compareInt);

    // Imprimindo os elementos do heap
    printHeap(heap);

    // Removendo o elemento de maior prioridade
    int* maxItem = (int*)removeMax(heap, compareInt);
    printf("Elemento removido: %d\n", *maxItem);

    // Imprimindo os elementos do heap novamente
    printHeap(heap);

    // Liberando a memória do heap
    freeHeap(heap);

    return 0;
}
